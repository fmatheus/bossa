<?xml version="1.0"?>

<!--
 Bossa Workflow System

 $Id$

 Copyright (C) 2003 OpenBR Sistemas S/C Ltda.

 This file is part of Bossa.

 Bossa is free software; you can redistribute it and/or modify it
 under the terms of version 2 of the GNU General Public License as
 published by the Free Software Foundation.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public
 License along with this program; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.
-->

<project name="Bossa" default="build" basedir=".">

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time he compiles it) -->
  <property file="build.properties" />
  <property file="${user.home}/.ant.properties" />

  <!-- Name of project and version, used to create filenames -->
  <property name="Name"    value="Bossa Workflow Management System"/>
  <property name="name"    value="bossa"/>
  <property name="version" value="0.5.0"/>
  <property name="fullname" value="${name}-${version}" />

  <!-- Set global properties for this build -->
  <property name="debug" value="true"/>
  <property name="deprecation" value="false"/>
  <property name="optimize" value="true"/>
  <property name="build.compiler" value="modern"/>
  <property name="build.compiler.emacs" value="on"/>
  <property name="javadoc" value="http://java.sun.com/j2se/1.3/docs/api"/>
  <property name="javadoc.access" value="public"/>
  <property name="testcase" value="com.bigbross.bossa.BossaTestSuite"/>
  <property name="junit.fork" value="false"/>
  <property name="junit.filtertrace" value="off"/>
  <property name="junit.summary" value="no"/>

  <property name="domain.package" value="com/bigbross"/>
  <property name="bossa.package" value="${domain.package}/bossa"/>

  <property name="src.dir" value="src/main"/>
  <property name="doc.dir" value="doc"/>
  <property name="lib.dir" value="lib"/>
  <property name="dist.dir" value="dist"/>
  <property name="dist.javadocs" value="${dist.dir}/javadocs"/>
  <property name="dist.javadocs.tests" value="${dist.dir}/javadocs.tests"/>
  <property name="dist.doc" value="${dist.dir}/doc"/>
  <property name="tests.dir" value="src/testcases"/>
  <property name="examples.dir" value="src/examples"/>

  <property name="build.dir" value="build"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.tests" value="${build.dir}/testcases"/>
  <property name="build.examples" value="${build.dir}/examples"/>

  <property name="docbook.xsl"
    value="/usr/share/sgml/docbook/xsl-stylesheets/html/docbook.xsl"/>
  <property name="docbookx.dtd"
    value="/usr/share/sgml/docbook/dtd/xml/4.1.2/docbookx.dtd"/>


  <path id="classpath">
  </path>

  <path id="lib.class.path">
    <fileset dir="${basedir}">
      <include name="${lib.dir}/*.jar"/>
    </fileset>
  </path>

  <path id="project.class.path">
    <pathelement location="${build.classes}"/>
    <path refid="lib.class.path"/>
    <pathelement path="${java.class.path}"/>
  </path>

  <path id="tests.class.path">
    <pathelement location="${build.tests}"/>
    <path refid="project.class.path"/>
  </path>

  <path id="examples.class.path">
    <pathelement location="${build.examples}"/>
    <path refid="tests.class.path"/>
  </path>

  <!-- Tasks -->

  <target name="init">
    <tstamp>
      <format property="subversion" pattern="yyyy.MM.dd.hh.mm.ss"/>
    </tstamp>
    <echo message="${Name} - ${version} (${subversion})"/>
    <available property="junit.present" classname="junit.framework.TestCase"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="build" depends="init"
	  description="Compiles the source code.">
    <mkdir dir="${build.classes}"/>
    <javac srcdir="${src.dir}"
           destdir="${build.classes}"
	   classpathref="project.class.path"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}">
    </javac>
  </target>

  <target name="jar" depends="build"
	  description="Creates library jar file.">
    <jar jarfile="${dist.dir}/${name}-${version}.jar" basedir="${build.classes}"/>
  </target>

  <target name="javadoc_check">
    <uptodate property="javadoc.notrequired"
              targetfile="${dist.javadocs}/packages.html" >
      <srcfiles dir= "${src.dir}" includes="**/*.java"/>
    </uptodate>
    <uptodate property="tests.javadoc.notrequired"
              targetfile="${dist.javadocs.tests}/packages.html" >
      <srcfiles dir= "${tests.dir}" includes="**/*.java"/>
    </uptodate>
  </target>

  <target name="javadoc" depends="javadoc_check" unless="javadoc.notrequired"
          description="Generates the API documentation.">
    <mkdir dir="${dist.javadocs}"/>
    <javadoc packagenames="${domain.package}/*"
             useexternalfile="yes"
             sourcepath="${src.dir}"
	     classpathref="project.class.path"
	     link="${javadoc}"
             destdir="${dist.javadocs}"
	     use="true"
             access="${javadoc.access}"
             author="true"
             version="true"
             windowtitle="${Name} API"
             doctitle="${Name} API">
      <bottom><![CDATA[<i>Copyright &#169; 2003 OpenBR Sistemas S/C Ltda.</i>]]></bottom>
    </javadoc>
  </target>

  <target name="javadoc-tests" depends="javadoc_check" unless="tests.javadoc.notrequired"
          description="Generates the API documentation for the tests.">
    <mkdir dir="${dist.javadocs.tests}"/>
    <javadoc packagenames="${domain.package}/*"
             sourcepath="${tests.dir}"
	     classpathref="tests.class.path"
             link="${javadoc}"
             destdir="${dist.javadocs.tests}"
             use="true"
             access="${javadoc.access}"
             author="true"
             version="true"
             windowtitle="${Name} Test Utilities"
             doctitle="${Name} Test Utilities">
      <group title="Bossa Core" packages="com.bigbross.bossa*"/>
      <bottom><![CDATA[<i>Copyright &#169; 2003 OpenBR Sistemas S/C Ltda.</i>]]></bottom>
    </javadoc>
  </target>

  <target name="docbook" description="Generates documentation.">
    <mkdir dir="${dist.doc}"/>
    <copy todir="${dist.doc}">
      <fileset dir="${doc.dir}" includes="**/*.png, **/*.html"/>
    </copy>
    <style basedir="${doc.dir}" destdir="${dist.doc}"
           style="${docbook.xsl}" includes="**/*.xml">
      <xmlcatalog>
        <dtd publicId="-//OASIS//DTD DocBook XML V4.1.2//EN"
             location="${docbookx.dtd}"/>
      </xmlcatalog>
    </style>
  </target>

  <target name="clean"
	  description="Cleans up build and dist directories.">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <target name="distclean" depends="clean"
	  description="Cleans up everything.">
    <delete>
      <fileset dir="${basedir}" includes="**/*~" defaultexcludes="no"/>
      <fileset dir="${basedir}" includes="**/.#*" defaultexcludes="no"/>
    </delete>
  </target>

  <target name="compile-tests" depends="build" if="junit.present">
    <mkdir dir="${build.tests}"/>
    <javac srcdir="${tests.dir}"
           destdir="${build.tests}"
	   classpathref="tests.class.path"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}">
    </javac>
  </target>

  <target name="test" depends="run-tests" description="Runs JUnit tests."/>

  <target name="run-tests" depends="dump-info, compile-tests" if="junit.present">
    <junit printsummary="${junit.summary}" haltonfailure="yes"
           filtertrace="${junit.filtertrace}"
           fork="${junit.fork}">
      <classpath refid="tests.class.path"/>
      <formatter type="plain" usefile="false"/>
      <test name="${testcase}"/>
    </junit>
  </target>

  <target name="dump-info" description="Echoes useful system properties.">
    <echo message="java.vm.info=${java.vm.info}"/>
    <echo message="java.vm.name=${java.vm.name}"/>
    <echo message="java.vm.vendor=${java.vm.vendor}"/>
    <echo message="java.vm.version=${java.vm.version}"/>
    <echo message="os.arch=${os.arch}"/>
    <echo message="os.name=${os.name}"/>
    <echo message="os.version=${os.version}"/>
    <echo message="java.home = ${java.home}"/>
    <echo message="java.class.path = ${java.class.path}"/>
    <echo message="build.compiler = ${build.compiler}"/>
    <echo message="file.encoding=${file.encoding}"/>
    <echo message="user.home = ${user.home}"/>
    <echo message="user.language=${user.language}"/>
  </target>

  <target name="compile-examples" depends="compile-tests">
    <mkdir dir="${build.examples}"/>
    <javac srcdir="${examples.dir}"
           destdir="${build.examples}"
	   classpathref="examples.class.path"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}">
    </javac>
  </target>

  <target name="bossa-browser" depends="compile-examples"
          description="Runs the Bossa browser example application.">
  	<java classname="com.bigbross.bossa.examples.BossaBrowser"
  		  classpathref="examples.class.path"/>
  </target>

  <target name="source" depends="distclean"
          description="Creates source tar.gz and zip files.">
    <mkdir dir="${dist.dir}/${fullname}"/>
    <copy todir="${dist.dir}/${fullname}" preservelastmodified="yes">
      <fileset dir="${basedir}" excludes="${dist.dir}/, ${lib.dir}/*.jar"/>
    </copy>
    <tar tarfile="${dist.dir}/${fullname}-src.tar.gz"
         basedir="${dist.dir}"
         compression="gzip"
	 includes="${fullname}/"/>
    <zip zipfile="${dist.dir}/${fullname}-src.zip"
         basedir="${dist.dir}"
	 includes="${fullname}/"/>
    <delete dir="${dist.dir}/${fullname}"/>
  </target>

  <target name="dist" depends="jar, javadoc, docbook"
	  description="Creates binary and documentation tar.gz and zip files.">
    <copy todir="${build.dir}/${fullname}" preservelastmodified="yes">
      <fileset dir="${dist.dir}" excludes="*.tar.gz, *.zip"/>
    </copy>
    <tar tarfile="${dist.dir}/${fullname}.tar.gz"
         basedir="${build.dir}"
         compression="gzip"
	 includes="${fullname}/"/>
    <zip zipfile="${dist.dir}/${fullname}.zip"
         basedir="${build.dir}"
	 includes="${fullname}/"/>
  </target>

  <target name="release" depends="source, dist"
	  description="Creates all distribution files.">
    <tar tarfile="${dist.dir}/${fullname}-dep.tar.gz"
         basedir="${basedir}"
         compression="gzip"
	 includes="${lib.dir}/"/>
    <zip zipfile="${dist.dir}/${fullname}-dep.zip"
         basedir="${basedir}"
	 includes="${lib.dir}/"/>
  </target>

</project>
