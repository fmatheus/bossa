
                                ===== 
                                Bossa
                                -----
                        A java workflow engine.
                        =======================

Overview
========

Bossa is a workflow engine written in Java. The engine is very fast
and lightweight, uses a very expressive Petri net notation to define
workflows, does not require a RDBMS and is very simple to use and to
integrate with java applications.

Actually, it was *designed* to be embedded. Therefore, Bossa is
organized as a library to be used by server side applications
(especially web oriented ones) that need workflow services. We plan,
in the future, to implement a shell over the current library to offer
workflow services as a stand alone server.

Bossa is being built by the BigBross team (http://www.bigbross.com),
an effort to produce first class open source software in Brazil.

The Bossa project page is located at http://www.bigbross.com/bossa.
Look there for more informations about Bossa: features, documentation,
examples, mailing lists, cvs access, etc.

Bossa is free software, licensed under the GNU GPL (see the file
"COPYING", or visit the site http://www.gnu.org/).

This software is OSI Certified Open Source Software.
OSI Certified is a certification mark of the Open Source Initiative.
(http://www.opensource.org/)


Status
======

Bossa is still alpha quality software.

We have a fully functional workflow engine and we are confident that
there are no major bugs. However, the APIs are still young and liable
to change. So, we do not recommend the use of Bossa in production
environments, yet.


Compiling Bossa
===============

Simple instructions:

# ant

:)

More elaborate instructions:

1) Setup your local ant build system. Bossa uses ant to build.

2) Check if Bossa dependencies (see below) are in the CLASSPATH or put
   the appropriate JARs or, if you are in a Unix like environment,
   create soft links to them in the lib directory under the main tree.

3) Run:
   # ant jar

4) Pick the bossa-x.y.z.jar in the dist directory. Use as prescribed.

5) (Optional) To test Bossa in your setup, run: 
   # ant test

6) (Optional) To generate the javadocs, run:
   # ant javadoc
   Point your browser to dist/javadocs/index.html

7) (Optional) To generate the docbooks, run:
   # ant docbook
   Note: You will have to setup the style ant task for this to
   work. For instructions doing that see the doc/README file.
   After the docs are created, point your browser to dist/doc/


Dependencies
============

For a list of Bossa dependencies see the lib/README file. For
convenience, we provide an archive with binaries of the runtime
dependencies in our download page.


And Now What?
=============

Right now, Bossa is lacking documentation as comprehensive as we would
like on the use of the library. However, the library is simple enough
that the current (somewhat incomplete) documentation, javadocs, tests
and examples should suffice.

For an overview of what Bossa is about see the Bossa Manifesto
(dist/doc/manifesto/bossa-manifesto.html). To start with the Bossa API
see the API HOWTO (dist/doc/api/bossa-api.html), and to understand it
better the definitive documentation is the javadoc.


Directory Structure
===================

This is how the directories are organized.

build          <-- this is where all compiled files (.class) go into when
 |                 you build the package.
 +-classes     <-- the classes for the Bossa library will appear here.
 +-testcases   <-- the classes for the tests will appear here.
dist           <-- the JAR files and javadocs will be put here. 
 | 
 +-doc         <-- the generated docbooks will appear here.
 +-javadocs    <-- the generated javadocs will appear here.
lib            <-- you may put needed JARs here.
doc            <-- the source documentation.
src            <-- the source code.
 | 
 +-main        <-- the source code for the Bossa library is here.
 +-testcases   <-- the source code for the tests is here.
