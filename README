
                                ===== 
                                Bossa
                                -----
                        A java workflow engine.
                        =======================

Overview
========

Bossa is a workflow engine written in Java. The engine is very fast
and lightweight, uses a very expressive Petri net notation to define
workflows, does not requires a RDBMS and is very simple to use and to
integrate with java applications.

Actually, it was *designed* to be embedded. Therefore, Bossa is
organized as a library to be used by server side applications
(especially web oriented ones) that need workflow services. We plan,
in the future, to implement a shell over the current library to offer
workflow services as a stand alone server.

Bossa is being built by the BigBross team (http://bigbross.com), an
effort to produce first class open source software in Brazil.

The Bossa project page is located at http://bigbross.com/bossa. Look
there for more informations about Bossa: features, documentation,
examples, mailing lists, cvs access, etc.

Bossa is free software, licensed under the GNU GPL (see the file
"COPYING", or visit the site http://www.gnu.org/).

This software is OSI Certified Open Source Software.
OSI Certified is a certification mark of the Open Source Initiative.
(http://www.opensource.org/)


Compiling Bossa
===============

Simple instructions:

# ant dist

:)

More elaborate instructions:

1) Setup your local ant build system. Bossa uses ant to build.

2) Check if Bossa dependencies (see below) are in the CLASSPATH or, if
   you are in a Unix like environment, create soft links to the
   appropriate JARs in a lib directory under the main tree (create
   it).

3) Run:
   # ant dist

4) Pick the bossa-x.y.z.jar in the dist directory. Use as prescribed.

5) To generate the javadocs, run:
   # ant javadoc
   Point your browser to dist/javadocs/index.html


Dependencies
============

Bossa requires the following software to compile:
(If specified the version number indicates minimum requirements.)

* J2SE 1.2 SDK
  Notes: The newer the better, 1.4 works fine (and fast).
  URL: http://java.sun.com/

* Ant
  Notes: We use 1.5.1, older versions may work.
  URL: http://ant.apache.org/

* JUnit 3.8.1
  Notes: For the tests only.
  URL: http://www.junit.org/

* Prevayler 1.03.003
  Notes: Binaries not available at the site, get from our download page.
  URL: http://www.prevayler.org/

* BSF CVS (2.3.0-rc1+)
  Notes: We need the current cvs version of BSF, get binaries from our
  download page.
  URL: http://jakarta.apache.org/bsf/

* Rhino
  Notes: We use 1.5R3.
  URL: http://www.mozilla.org/rhino/

Bossa requires the following software to run:

* J2SE 1.2 JRE
* Prevayler 1.03.003
* BSF CVS (2.3.0-rc1+)
* Rhino


And Now What?
=============

Documentation is the javadoc.


Directory Structure
===================

This is how the directories are organized.


bin            <-- some useful scripts
build          <-- this is where all .classes go into when you build the
 |                 package 
 +-classes     <-- the compiled classes for the bossa library are here
 +-ROOT        <-- the servlet root tree is here
conf           <-- configuration files to go into the .war file 
 |
 +-default     <-- files here are used if no files are in the parent directory 
db             <-- sample Hypersonic database 
debian         <-- used to build Debian package 
dist           <-- your .war and .jar files will be put here 
doc            <-- documentation for bossa 
examples
 | 
 +-admin       <-- command-line interface to database, with batched 
 |                 input examples
 +-conf        <-- example of configuration files
 +-models      <-- workflow models
 +-sql         <-- useful files with SQL commands  
 +-template    <-- templates for generating web interface
lib            <-- jars that we need
rpm            <-- used to build RPM package
src            <-- the source code
tests          <-- tests to be used with Junit
webapp         <-- the web interface
 |
 +-html        <-- the HTML templates
 +-images      <-- images used in the web interface
 +-locale      <-- localization files
 +-src         <-- source for the servlets
 | |
 | +-external  <--
 +-web         <-- the index that redirects to the servlet


Under src/com/bigbross/ you will find these directories (or java packages):

wave         <-- source for the Wave compiler
 |
 +-lex       <-- scanner (lexer)
 +-symbtab   <-- symbol table
 +-wave      <-- syntax analyzer

bossa        <-- source for the workflow engine
 |
 +-base        <-- base classes, used everywhere
 +-model       <-- classes defining a process model
 +-user        <-- the user manager
 +-task        <-- the task manager
 +-storage     <-- the persistence layer
 +-notifier    <-- the notifier (sends messages to users)
 +-repository  <-- the file repository (for attachments)
 +-message     <-- the internal messenger (messages within the WE only)
 +-visitor     <-- visitors; currently only one to print a model
 +-application <-- the application facade; interfaces use it too
                   interact with Bossa
