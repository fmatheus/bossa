
                                ===== 
                                Bossa
                                -----
                        A java workflow engine.
                        =======================

Overview
========

Bossa is a workflow engine written in Java. The engine is very fast
and lightweight, uses a very expressive Petri net notation to define
workflows, does not requires a RDBMS and is very simple to use and to
integrate with java applications.

Actually, it was *designed* to be embedded. Therefore, Bossa is
organized as a library to be used by server side applications
(especially web oriented ones) that need workflow services. We plan,
in the future, to implement a shell over the current library to offer
workflow services as a stand alone server.

Bossa is being built by the BigBross team (http://www.bigbross.com),
an effort to produce first class open source software in Brazil.

The Bossa project page is located at http://www.bigbross.com/bossa.
Look there for more informations about Bossa: features, documentation,
examples, mailing lists, cvs access, etc.

Bossa is free software, licensed under the GNU GPL (see the file
"COPYING", or visit the site http://www.gnu.org/).

This software is OSI Certified Open Source Software.
OSI Certified is a certification mark of the Open Source Initiative.
(http://www.opensource.org/)


Status
======

Bossa is still alpha quality software.

We have a fully functional workflow engine and we are confident that
there are no major bugs. However, the APIs are still young and liable
to change. So, we do not recommend the use of Bossa in production
environments, yet.


Compiling Bossa
===============

Simple instructions:

# ant dist

:)

More elaborate instructions:

1) Setup your local ant build system. Bossa uses ant to build.

2) Check if Bossa dependencies (see below) are in the CLASSPATH or, if
   you are in a Unix like environment, create soft links to the
   appropriate JARs in a lib directory under the main tree (create
   it).

3) Run:
   # ant dist

4) Pick the bossa-x.y.z.jar in the dist directory. Use as prescribed.

5) To generate the javadocs, run:
   # ant javadoc
   Point your browser to dist/javadocs/index.html


Dependencies
============

Bossa requires the following software to compile:
(If specified the version number indicates minimum requirements.)

* J2SE 1.2 SDK
  Notes: The newer the better, 1.4 works fine (and fast).
  URL: http://java.sun.com/

* Ant
  Notes: We use 1.5.1, older versions may work.
  URL: http://ant.apache.org/

* JUnit 3.8.1
  Notes: For the tests only.
  URL: http://www.junit.org/

* Prevayler 1.03.003
  Notes: Binaries not available at the site, get from our download page.
  URL: http://www.prevayler.org/

* BSF CVS
  Notes: We need the current cvs version of BSF, get binaries from our
  download page.
  URL: http://jakarta.apache.org/bsf/

* Rhino
  Notes: We use 1.5R3.
  URL: http://www.mozilla.org/rhino/

Bossa requires the following software to run:

* J2SE 1.2 JRE

* Prevayler 1.03.003

* BSF CVS

* Rhino


And Now What?
=============

Right now, Bossa is lacking how-to documentation on the use of the
library. However, the library is simple enough that javadoc
documentation, tests and examples should suffice.

First of all, to use workflow it is necessary to have a workflow
definition, a case type. A case type is represented by a high level
Petri net with weighted edges, and is currently created
programmatically. For a description of workflow modeling as Petri
nets, somewhat similar to the one we use, see Section 4 of:

http://tmitwww.tm.tue.nl/staff/wvdaalst/Publications/p53.pdf

We will document our Petri model soon. For now a look at the code of
CaseTypeTest.createTestCaseType() in the testcases directory.

Once the case type is defined, cases can be created to represent the
enactment of individual workflows. This involves opening, closing and
canceling work items and activities, and represents the run time
behavior of a workflow application. An example of such application is
the BossaBrowser.main(). Look there for examples of use, but beware,
the code is not of the same high standard of the library. :)

To understand better the examples, the definitive documentation is the
javadoc. Generate it, read it, enjoy.


Directory Structure
===================

This is how the directories are organized.

build          <-- this is where all compiled files (.class) go into when
 |                 you build the package.
 +-classes     <-- the classes for the Bossa library will appear here.
 +-testcases   <-- the classes for the tests will appear here.
dist           <-- the JAR files and javadocs will be put here. 
 | 
 +-javadocs    <-- the generated javadocs will appear here.
lib            <-- create this directory and put needed JARs.
src            <-- the source code.
 | 
 +-main        <-- the source code for the Bossa library is here.
 +-testcases   <-- the source code for the tests is here.
